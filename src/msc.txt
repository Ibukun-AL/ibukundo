 <router-link class="secondary-content" 
      v-bind:to="{ name: 'taskdetails',
       params: { task_id: task.task_id }}"><v-icon> edit</v-icon></router-link>
       ///

       grey lighten-4 fill-height"
       ///
           v-for="task in tasks">
  <v-flex xs12 md6 :key="task.id">
    <v-hover v-slot:default="{ hover }">
        <v-card
          :elevation="hover ? 12 : 2"
          class="ma-2"
          max-width="550"
         :class="{ 'on-hover': hover }"

        >
         <div> {{task.task_id}} {{task.title}}</div>
         <div class="caption mt-5"> <v-icon>today</v-icon>{{task.due}}</div>
          <v-row
          align="center"
          justify="end"
        >
      <router-link class="secondary-content" 
      v-bind:to="{ name: 'taskdetails',
       params: { task_id: task.task_id }}"><v-icon> edit</v-icon></router-link>
        </v-row>
        </v-card>
        
      
    </v-hover>
  </v-flex>
      </template>
      ///
      //////////////
       var user = firebase.auth().currentUser;
           this.currentUser=firebase.auth().currentUser.email;
           db.collection('users').doc(user.uid).collection('tasks').orderBy('title').get().then(querySnapshot=>{
             querySnapshot.forEach(doc=>{
               const data={
                 'id':doc.id,
                 'task_id': doc.data().task_id,
                 'title':doc.data().title,
                 'priority':doc.data().priority,
                 'due':doc.data().due
                 
               }
               this.tasks.push(data);
             })
           }) 






           ////////////////////////////

            created(){
            var user = firebase.auth().currentUser;
           this.currentUser=firebase.auth().currentUser.email;
           db.collection('users').doc(user.uid).collection('boards').where('slug','==', this.$route.params.slug).get().then(querySnapshot=>{
             querySnapshot.forEach(doc=>{
               const data={
                 'id':doc.id,
                 'boardname': doc.data().boardname,
                 'slug':doc.data().slug
                 
               }
               this.bid=doc.data().slug
               this.bidcontainer=this.bid
               this.boards.push(data);
               console.log(doc.data().slug);
                console.log(this.bid);
             })
           }) 
  },


  //////////////////////////////////////////////
  <template>
 <div id="app">
  <v-app id="inspire">
    <v-app-bar
      app
      clipped-left
      color="grey-lighten-4"
    >
      <v-app-bar-nav-icon @click="drawer = !drawer"></v-app-bar-nav-icon>
      <span class="title ml-3 mr-5">I&nbsp;<span class="font-weight-light">Planner</span></span>
      <v-spacer></v-spacer>
       <v-tooltip bottom>
      <template v-slot:activator="{ on, attrs }">
        <v-btn
          icon
          color="primary"
          dark
          v-bind="attrs"  
          v-on="on"
        ><v-icon>notifications</v-icon></v-btn>
      </template>
      <span>Reminders</span>
    </v-tooltip>
    <v-tooltip bottom>
      <template v-slot:activator="{ on, attrs }">
        <v-btn
          icon
          color="primary"
          dark
          v-bind="attrs"
          v-on="on"
          v-on:click="logout"
        ><v-icon>logout</v-icon></v-btn>
      </template>
      <span>Logout</span>
    </v-tooltip>
    </v-app-bar>

    <v-navigation-drawer
      v-model="drawer"
      app
      clipped
      color="#043353"
    >
      <v-list
        dense
       color="#043353"
      >
        <template v-for="(item, i) in items">
          <v-layout
            v-if="item.heading"
            :key="i"
            row
            align-center
          >
            <v-flex xs6>
              <v-subheader v-if="item.heading">
                {{ item.heading }}
              </v-subheader>
            </v-flex>
            <v-flex
              xs6
              class="text-xs-right"
            >
              <v-btn
                small
                text
              >edit</v-btn>
            </v-flex>
          </v-layout>
          <v-list-item
            v-else
            :key="i"
              router :to=item.route
          >
            <v-list-item-action>
              <v-icon color="grey">{{ item.icon }}</v-icon>
            </v-list-item-action>
            <v-list-item-content>
              <v-list-item-title class="grey--text mb-5">
                <span class="headline .font-weight-bold">{{ item.text }} </span>
                <v-btn icon> <v-icon color="grey">add</v-icon></v-btn>
              </v-list-item-title>
            </v-list-item-content>
          </v-list-item>
        </template>
      </v-list>
    </v-navigation-drawer>
    <v-container class="my-5" fluid>
    <v-slide-y-transition mode="out-in">
      <v-layout row align-left wrap>
        <v-flex xs12><h2> {{boardname}} </h2></v-flex>
        <v-flex sm3 v-for="list in lists" :key="list.listname" pa-1>
          <v-card>
            <v-card-title primary-title>
              <div class="headline">
                {{list.listname}}
              </div>
            </v-card-title>
            <v-card-actions>
              <v-btn color="primary" text>G0</v-btn>
            </v-card-actions>
          </v-card>
        </v-flex>
        <v-flex sm3 pa-2>
          <v-card width="300px">
           <v-card-title primary-title style="flex-direction:column">
              <div class="headline">Create lists</div>
              <div><v-form>
                <v-text-field v-model="listname" title="name" required></v-text-field>
              </v-form>
              </div>
            </v-card-title>
            <v-card-actions>
              <v-btn text color="secondary" class="ma-auto" @click="createlist">Create</v-btn>
            </v-card-actions>

          </v-card>
        </v-flex>

      </v-layout>
    </v-slide-y-transition>
  <v-btn text>Testing</v-btn>
    <template>
     <v-row justify="end" ma-2>
       <v-dialog v-model="dialog" persistent max-width="600px">
         <template v-slot:activator="{ on, attrs }">
     <v-btn class="mx-2" fab dark color="indigo"
      v-bind="attrs"
      v-on="on"
          >
      <v-icon dark
          >mdi-plus</v-icon>
    </v-btn>
         </template>
          <v-card>
        <v-card-title>
          <span class="headline">ADD TASK</span>
        </v-card-title>
        <v-card-text>
          <v-container>
            <v-row>
              <v-col cols="12">
                 
                <v-text-field label="Title*" required v-model="title"></v-text-field>
              </v-col>
              <v-col cols="12" sm="6">
                <v-select
                v-model="priority"
                  :items="['High', 'Medium', 'Low']"
                  label="Priority*"
                  required
                ></v-select>
              </v-col>
              <v-col cols="12" sm="6" md="4">
      <v-dialog
        ref="dialog"
        v-model="modal"
        :return-value.sync="date"
        persistent
        width="290px"
      >
        <template v-slot:activator="{ on, attrs }">
          <v-text-field
            v-model="date"
            label="Picker in dialog"
            prepend-icon="event"
            readonly
            v-bind="attrs"
            v-on="on"
          ></v-text-field>
        </template>
        <v-date-picker v-model="date" scrollable>
          <v-spacer></v-spacer>
          <v-btn text color="primary" @click="modal = false">Cancel</v-btn>
          <v-btn text color="primary" @click="$refs.dialog.save(date)">OK</v-btn>
        </v-date-picker>
      </v-dialog>
    </v-col>
            </v-row>
          </v-container>
          <small>*indicates required field</small>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="blue darken-1" text @click="dialog = false">Close</v-btn>
          <v-btn color="blue darken-1" text @click="addTask" :loading="loading">Save</v-btn>
        </v-card-actions>
      </v-card>
       </v-dialog>
  </v-row>
    </template>

    </v-container>
   
  </v-app>
</div>
</template>

<script>
// @ is an alias to /src
import firebase from "../firebase";
import 'firebase/auth'
const db = firebase.firestore();
export default {
name: 'board2',
  data(){
    return{
    drawer: false,
    dialog: false,
    title:'',
    boardname:null,
    slug:'',
    priority:null,
    listname:'',
    bid:'',
    bidcontainer:'',
    lid:'',
    due:null,
    username:'',
    isloggedin:false,
    loading:false,
    currentUser:false,
      date: new Date().toISOString().substr(0, 10),
      modal:false,
   items: [
      { icon: 'today', text: 'TASKS', route:'/user' },
      { icon: 'notes', text: 'NOTES', route:'/notes' },
      
    ],

    boards:[],
    tasks:[],
    lists:[],
    inprogresstasks:[],
    completedtasks:[],
    
    }
    
  },
    beforeRouteEnter(to,from,next){
         var user = firebase.auth().currentUser;
      db.collection('users').doc(user.uid).collection('boards').where('slug', '==', to.params.slug).get()
      .then(querySnapshot=>{
          querySnapshot.forEach(doc=>{
              next(vm=>{
                  vm.boardname=doc.data().boardname
                  vm.bid=doc.data().slug
                  })
                  })
                  })
    },
    watch:{
        '$route': 'fetchdata'
    },
     
  methods:{
       fetchdata(){
            var user = firebase.auth().currentUser;
             db.collection('users').doc(user.uid).collection('boards').where('slug','==', this.$route.params.slug).get()
             .then(querySnapshot=>{
                 querySnapshot.forEach(doc=>{
                     this.boardname=doc.data().boardname
                     this.slug=doc.data().slug
                     this.bid=doc.data().slug
                     
                 })
             })
        },
    testing(){
       var user = firebase.auth().currentUser;
           this.currentUser=firebase.auth().currentUser.email;
           db.collection('users').doc(user.uid).collection('boards').doc(this.bidcontainer).collection('lists').orderBy('boardname').get().then(querySnapshot=>{
             querySnapshot.forEach(doc=>{
               const data={
                 'boardname': doc.data().boardname,
                 'slug':doc.data().slug
                 
               }
               this.boards.push(data);
               console.log(doc.data().slug);
             })
           })  
    },
          addTask(){
       var user = firebase.auth().currentUser;
       if(user && this.title!=""){
         this.loading=true;
               db.collection('users').doc(user.uid).collection('tasks').doc().set({
                       title:this.title,
                       priority:this.priority,
                       due:this.due
                       
               })
               this.loading=false;
               console.log(this.title);
               console.log(user.email);
               this.dialog=false;
               this.title='',
                 this.priority='',
                this.due=''
       }
          },
          createlist(){
            var user=firebase.auth().currentUser;
            this.lid=this.generateUUID()
            if(user &&this.listname!=''){
               db.collection('users').doc(user.uid).collection('boards').doc(this.bid).collection('lists').doc(this.lid).set({
                listname:this.listname,
                slug:this.lid
              })
              this.listname=''
             
              
            }
          },

          logout(){
            firebase.auth().signOut().then(()=>
            {
              this.$router.push("/");
            }
            );
          },
          
         generateUUID () {
          let d = new Date().getTime()
          let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            let r = (d + Math.random() * 16) % 16 | 0
            d = Math.floor(d / 16)
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16)
          })
          return uuid
        },
          del(doc){
              var user = firebase.auth().currentUser;
            db.collection('users').doc(user.uid).collection('tasks').doc(doc).delete().then(function() {
            console.log('Document succesfully deleted');
                }).catch(function(error){
    console.error('Error removing document :',error)
          });
          },
          update(){

          }
  },
 
  
};
  

</script>

<style >
/* #keep .v-navigation-drawer__border {display: none;} */

.task.Low{
  border-left:4px solid #3cd1c2; 
}
.task.High{
  border-left:4px solid orange; 
}
.task.Medium{
  border-left:4px solid tomato; 
}
</style>
